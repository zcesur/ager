{
    "contents" : "---\ntitle: \"Estimating Williams College Faculty Age\"\nauthor: \"Zafer Cesur ('19)\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Estimating Williams College Faculty Age}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n  \n---\n\n**Abstract** This paper describes the R package **ager**. The package is focused on gathering the graduation data of Williams College faculty in order to construct statistical models for faculty age. The paper outlines the functions for selection and organization of the data, which are designed to require little to no manual manipulation during pre-processing and transformation thereof and be as applicable as possible so that it can easily be used for future years. The usage of these functions is illustrated and the results are demonstrated with descriptive histograms.\n\n---\n\n## Introduction:\nThe package **ager** provides the functionality for easily accessing educational background of Williams College faculty members that consist of professors, lecturers and postdoctoral fellows. This is useful because assuming that most people graduate when they are 22 years old, we can estimate faculty's age with a small margin of error.\n\nThe data on faculty members' academic overview is available in the course catalogs that can be accessed online on Williams' website. Let us explore and compare some excerpts taken from these catalogs. For instance, this is how it looked in 2009-2010: \n\n> Colin C. Adams, Thomas T. Read Professor of Mathematics  \n> B.S. (1978) M.I.T.; Ph.D. (1983) University of Wisconsin\n\nAnd this in 2013-2014:\n\n> Colin C. Adams, Thomas T. Read Professor of Mathematics, 1978, BS, MA Institute of Technology, 1983, PHD, University of WI, Madison\n\nAnd finally, in 2015-2016:\n\n> Adams,Colin C., Mathematics and Statistics \n\nAs we can observe, the format has significantly changed over the years. Also notice that in the most recent year, we do not get informed about the educational background of the professor, but rather only on the faculty he belongs to. This also holds true for the previous year, 2014-2015. The lack of information and the unpredictability of the presentation format urged us to devise a standard structure so that the data can be represented in a concise way and to develop an indirect method so that the desired information can be extracted.\n\nThe rest of the paper is organized as follows. First we are going to explain how we structured the data. Then, we are going to introduce the method we used to extract missing data. The last section concludes the article by presenting histograms and plots.\n\n---\n\n## Methods\nThis section presents the methodology used in the package **ager**.\n\n### 1. Selection and preparation\nThe catalog files are downloaded from the Williams' website in PDF format. Then, using A-PDF Text Extractor, the selected pages are converted into TXT files. The desired pages vary from year to year based on the content of the catalog; for the most academic year 2015-2016 we need pages from 396 through 398. Here is the workflow that we used to prepare the data we need:\n\n**1.** Run A-PDF Text Extractor  \n**2.** Open bulletin2015_16.pdf  \n**3.** In the options tab, select pages from 396 to 398 and make sure *In PDF Order* is chosen as the method for extraction.  \n**4.** Extract text  \n**5.** Edit the lines that end prematurely, by hand. There were 2 manual editings for this document:\n\n  + Gibson,Matthew, Economics Department\n  + Das,Joanna Dee, Dance Department\n\nThe workflow for other years is exactly the same.\n\n### 2. Parsing the data\nThe next step is cleaning and tidying up the data. In this section I will introduce the *scrub*, *gather_exactly* and *gather_reformated* functions.\n\n#### 2.1 scrub\n```{r}\nlibrary(magrittr)\nlibrary(devtools)\ndevtools::load_all()\n\n  # Open up a txt file and store lines of information as character strings of the\n  # vector 'data'\n  data <- paste(\"2015-16\", \".txt\", sep = \"\") %>%\n    system.file(\"extdata\", ., package = \"ager\") %>%\n    readLines(skipNul = TRUE)\n    summary(data)\n    head(data, 12)\n```\n\nAs we can see, there is a myriad of unwanted lines in the beginning of the document. We also have to get rid of empty lines inbetween and of the elements containing page numbers. We can remove these with the following set of codes.\n\n```{r}\n  # Remove leftovers from the previous page. In this case, we do not have any, however\n  # there are, for instance in the catalog from the year 2010-2011, some.\n  data <- data[-(1:(grep(\"FACULTY\", data)[1]))]\n    \n  # Remove all other irrelevant data at the beginning of the document until coming\n  # across a line containing a comma\n  data <- data[-(1:(grep(\",\", data)[1] - 1))]\n  \n  # Remove the strings which are of length 0 and those containing page numbers. 4 is not\n  # chosen arbitrarily but rather based on other years' documents. For instance in the\n  # previous 2 years, the strings that contain pages are formatted as 3-digit integer and\n  # a space.\n  data <- setdiff(data, data[nchar(data) <= 4])\n  head(data)\n```\n\nAfter the basic structure is established, we need to make sure no character string is stored as 2 separate ones. This can be caused while converting PDF documents if soft line breaks are  converted to hard line breaks. For this document we do not need to worry about it as the lines are already very short. But for the year 2013-2014, for example, we need to run the following as the last step of cleaning process to make sure it flows smoothly.\n\n```{r eval = FALSE}\n  short_lines <- order(nchar(data), decreasing = FALSE)[1:15]\n  long_lines <- order(nchar(data), decreasing = TRUE)[1:15]\n\n  # Evaluate which of the long lines are immediately followed by a short line\n  cut_lines <- short_lines[(short_lines - 1) %in% long_lines]\n\n  # Join the cut off line with the line above\n  data[cut_lines - 1] <- paste(data[cut_lines - 1], data[cut_lines], sep=\" \")\n\n  # Remove cut off lines\n  data <- setdiff(data, data[cut_lines])\n```\n\nOf course, this step requires an assumption and an arbitrary integer to be chosen and there might be a better algorithm or program suited for this, but I have observed that it is precise enough for our purposes.\n\nThis section can be reproduced simply with the *scrub* function.\n\n```{r}\n  data <- scrub(\"2015-16\")\n  head(data)\n```\n\n#### 2.2. gather\\_reformatted / gather\\_exactly\n\nFor the third part, it is crucial that we extract the names of faculty members from the character vector we have just recently obtained. Because the names are in *last-first* format in the year 2015-2016, we are going to use the function *gather_reformatted*, but the other one operates on the same principle as well.\n\n```{r}\n  # Obtain first names using regular expressions\n  first_name <-\n    \",(| )(.*?),\" %>%\n    regexpr(data) %>%\n    regmatches(data, .) %>%\n    gsub(\",(| )|,\", \"\", .)\n  head(first_name)\n```\n\nIt finds and returns the first match inbetween two commas. Although there is no space after the first comma in this document, (| ) is added to the pattern in order not to lose generality.\n\n```{r}\n    # Similarly,\n  last_name <-\n    \"[A-Z](.*?),\" %>%\n    regexpr(data) %>%\n    regmatches(data, .) %>%\n    gsub(\",.*\", \"\", .)\n  head(last_name)\n```\n\nThis one explicitly indicates that the match should start with a capital letter. This is in order to get rid of special characters that represent if a faculty member is visiting or on leave, and also to get rid of spaces that are present in some documents.\n\n```{r}\n    names <- paste(first_name, last_name, sep = \" \")\n  head(names)\n```\n\nThis section can be reproduced with the function *gather_reformatted*. Let us see how the other related function works by directly implementing it.\n\n```{r}\n  scrub(\"2013-14\") %>%\n  gather_exactly() %>%\n    head()\n```\n\n### 3 Extracting data\n\n#### 3.1 From another catalog\n\nNow using the names we have gathered, we can obtain information from another document that has the desired content. For instance, so as to access the information we need for the analysis of the academic year 2015-16, we could extract data using the names of the faculty members who are common, from another source, for instance the catalog of the year 2013-14. We store the source data in another character vector called *data2*, but we do not need to gather names from this data source because it is unnecessary.\n\n```{r}\n  data2 <- scrub(\"2013-14\")\n  head(data2)\n  \n  # Define an empty data frame to store the values\n  faculty_df <- data.frame(matrix(vector(), length(names), 5,\n    dimnames = list(c(), c(\"Name\", \"Graduation.Year\", \"Degree\", \"College\", \"Current.Age\"))),\n    stringsAsFactors = FALSE)\n  \n  # Locate the names from main data in the source data (i is arbitrarily chosen for\n  # demonstrative purposes)\n  i <- 50\n  grep(names[i], data2)\n  \n  # Find who it is\n  data2[grep(names[i], data2)]\n  \n  # Locate relevant information\n  pattern <- \"\\\\d{4}, (B\\\\w+|AB), (.*?),\"\n  location <- regexpr(pattern, data2[grep(names[i], data2)])\n  \n  # Return the match\n  education_info <- regmatches(data2[grep(names[i], data2)],\n    regexpr(pattern, data2[grep(names[i], data2)])) %>%\n  print  \n  \n  # Decompose it\n  year <- gsub(\",(.*)\", \"\", education_info)\n  degree <- gsub(\"\\\\d{4}, |,(.*)\", \"\", education_info)\n  college <- gsub(\"\\\\d{4}(.*), |,\", \"\", education_info)\n  print(c(year, degree, college))\n```\n  \nNext, we need to add a couple of if-statements to deal with missing information:\n\n```{r}\n  # If the faculty member is not on the source data, return NA\n  if (length(grep(names[i], data2))==0){\n      faculty_df[i, ] <- c(names[i], rep(NA, 4))\n  }\n  \n  # If academic data is unavailable (some professors have only master's degree or Ph.D.\n  # listed), return NA\n  if (length(education_info) == 0){\n      faculty_df[i, ] <- c(names[i], rep(NA, 4))\n  }\n```\n\nStore the values in the data frame and define a for loop (not shown here).\n\n```{r}\n  faculty_df[i, ] <- c(names[i],\n                       year,\n                       degree,\n                       college,\n                       2016-as.numeric(year)+22)\n  print(faculty_df[i, ])\n```\n\nFinally, convert degrees into the conventional degree format which has dots inbetween letters and columns into their respective, *actual* classes.\n\n```{r}\n  by1 <- c(\"BA\", \"BS\", \"BM\", \"BFA\", \"BPhil\", \"AB\", \"BE\")\n  by2 <- c(\"B.A.\", \"B.S.\", \"B.M.\", \"B.F.A.\", \"B.Phil.\", \"B.A.\", \"B.E.\")\n  for (j in 1:7){\n    faculty_df$Degree <- sub(by1[j], by2[j], faculty_df$Degree)\n  }\n  print(faculty_df[i, ])\n  faculty_df$Graduation.Year <- as.integer(faculty_df$Graduation.Year)\n  faculty_df$Degree <- as.factor(faculty_df$Degree)\n  faculty_df$Current.Age <- as.factor(faculty_df$Current.Age)\n```\n\nThis section can be reproduced simply as follows.\n\n```{r}\n  faculty_df <- extract_info(\"2015-16\", source_year = \"2013-14\",\n                transformNames = TRUE, fillGaps = FALSE)\n  str(faculty_df)\n```\n\nIn order to fill missing values, *fillGaps* argument of the function can be changed to TRUE. However this can also be done as a separate step as it takes some time to retrieve desired information from the internet.\n\n#### 3.2 From the internet\n\nUsing the names we have gathered in **2.2**, we can create search queries to investigate desired data further online by making use of Williams' directory search engine, which can generically accessed with the URL format [http://www.williams.edu/people/?s_directory=firstname+lastname](http://www.williams.edu/people/?s_directory=firstname+lastname) without middle names. We need the following set of codes.\n\n```{r}\n  # The carrot makes sure that we only get the first word of each name element.\n  first_name <- regmatches(names, regexpr(\"^\\\\w+\", names))\n  \n  # The optional \\\\w+[-] pattern makes sure that we take hypenated last names such as\n  # 'Robert Baker-White' into account. Such names cause no loss of generality in the\n  # generic search URL format given above.\n  last_name <- regmatches(names, regexpr(\"(\\\\w+[-])?\\\\w+$\", names))\n  \n  search_query <- paste(first_name, \"+\", last_name, sep = \"\")\n  search_link <- paste(\"http://www.williams.edu/people/?s_directory=\", search_query,\n                 sep = \"\")\n  head(search_link)\n  \n```\n\nUnfortunately, the search page only gives out limited information that consists of profession, department, office, phone number and e-mail address. It does not contain any links that we can follow, either. Therefore, we need to take an additional step and create a generic profile URL since we can extract Unix ID's from the e-mail address. We observed that the profile URL is in the format [http://www.williams.edu/profile/unixid](http://www.williams.edu/profile/unixid). Let us take Robert E. Baker-White, who is in the 18th row of our *names* vector, as an example.\n\n```{r}\n  library(rvest)\n  k <- 18\n  unix_id <-\n    read_html(search_link[k]) %>%\n    html_nodes(css = \".phone+ .email a\") %>%\n    html_attr(\"href\") %>%\n    gsub(\"mailto:|@williams.edu\", \"\", .)\n  print(unix_id)\n```\n\nTo select the CSS, we simply used [SelectorGadget](http://selectorgadget.com) as Hadley Wickham also suggests in his package **rvest**. Next, we create profile URLs using the Unix IDs we have obtained and repeat the step above.\n\n```{r}\n  profile_data <-\n    paste(\"http://www.williams.edu/profile/\", unix_id, sep=\"\") %>%\n    read_html() %>%\n    html_nodes(css = \".profile-education .profile-subsection\") %>%\n    html_text()\n  print(profile_data)\n  \n```\n\nSimilarly, we extract the desired data as we did in **3.1**, but with a slightly different pattern.\n\n```{r}\n  pattern <- \"(B\\\\.(.*?)\\\\.|A\\\\.B\\\\.|Diploma) .*? \\\\(\\\\d{4}\\\\)\"\n  \n  # Return the match\n  education_info <- regexpr(pattern, profile_data) %>%\n    regmatches(profile_data, .) %>%\n    print  \n  \n  # Decompose it\n  year <- gsub(\"(B\\\\.(.*?)\\\\.|A\\\\.B\\\\.|Diploma) .* \\\\(|\\\\)\", \"\", education_info)\n  degree <- gsub(\" .*\", \"\", education_info)\n  college <- gsub(\"(B\\\\.(.*?)\\\\.|A\\\\.B\\\\.|Diploma) | \\\\(\\\\d{4}\\\\)\", \"\", education_info)\n  print(c(year, degree, college))\n```\n\nWe also need an if-statement to deal with missing people, i.e., postdoctoral fellows and some visiting lecturers who do not appear on the directory search. We can do this by simply defining a variable named *email_node* and wrapping around our code with the following.\n\n```{r eval = FALSE}\n  email_node <-\n    read_html(search_link[k]) %>%\n    html_nodes(css = \".phone+ .email a\")\n  \n  # If the person is not under the directory, we can safely assume the length of the variable\n  # we have defined to be zero.\n  if (length(email_node) != 0){\n}\n```\n\nThere are also two conditions that can stop the iteration. In order to handle such exceptions without breaking our for-loop and to see where they occur, we need to use the function **tryCatch**.\n\n**1.** There may be multiple people with the same first and last name, in which case we obtain two different Unix IDs and they are both stored in the same vector *unix_id*. However, the function *read_html* takes only a single value and if a vector containing multiple URLs is provided, an error arises. Running the code with the *tryCatch* function around it shows us that there are two such cases: 'Matthew Gibson' and 'Joel Lee'. In each case, there is a professor and a student with the same first and last name. Since faculty members are always shown above students and other staff, we could command it to take the first value assuming it is unlikely that two professors share the same name. Just to be safe, we add an if-statement to check manually if our assumption is true and remove the *tryCatch* function because it is redundant. To demonstrate:  \n\n```{r}\n  names[132]\n  unix_id <-\n    read_html(search_link[132]) %>%\n    html_nodes(css = \".phone+ .email a\") %>%\n    html_attr(\"href\") %>%\n    gsub(\"mailto:|@williams.edu\", \"\", .)\n  if (length(unix_id) > 1){\n    print(cat(\"Warning: More than one people with the name\", print(names[132]), \"\\n\"))\n  }\n  return(unix_id[1])\n```\n\n**2.** There may be some faculty members who have web profile pages, but their undergraduate degree information is missing. With the exact method as above (i.e., by using *tryCatch*), we observe that there are 5 such cases: \n\n* Nicole S. Desrosiers    \n* Wang Guowei  \n* Mamoru Hatakeyama  \n* Christophe A. Kone   \n* Julia L. Kowalski\n  \n```{r eval = FALSE}\n  tryCatch({\n  \n  }, error=function(e){cat(\"Missing information on\", print(names[i]), \"\\n\")})\n```\n\nThis section can be reproduced simply with the following function. Note that if we want to do this section separately rather than simply passing TRUE value to *fillGaps* argument of *extract_info*, we need to define the *names* variable because *extract_info* only returns a data frame.\n\n```{r eval = FALSE}\n  names <-\n    scrub(\"2015-16\") %>%\n    gather_reformatted\n  fill_gaps(faculty_df)\n```\n\n---\n\n## Results\n\nFor the sake of easy access to data frames, I have stored the data frames we need in the folder *inst/extdata* in advance. Let us load all our data and and combine them into a single data frame after adding another column that specifies the academic year.\n\n```{r results = \"hide\"}\n  library(dplyr)\n```\n\n```{r}\n  faculty1516_df <- read.csv(system.file(\"extdata\", \"dataframe1516.csv\", package = \"ager\"),\n                    row.names = seq(along = 438),\n                    stringsAsFactors = FALSE)\n  faculty1516_df$Academic.Year <- \"2015-2016\"\n  \n  faculty1415_df <- read.csv(system.file(\"extdata\", \"dataframe1415.csv\", package = \"ager\"),\n                    row.names = seq(along = 421),\n                    stringsAsFactors = FALSE)\n  faculty1415_df$Academic.Year <- \"2014-2015\"\n  \n  faculty1314_df <- read.csv(system.file(\"extdata\", \"dataframe1314.csv\", package = \"ager\"),\n                    row.names = seq(along = 418),\n                    stringsAsFactors = FALSE)\n  faculty1314_df$Academic.Year <- \"2013-2014\"\n  facultyoverview_df <- rbind(faculty1516_df, faculty1415_df, faculty1314_df)\n  \n  # Split the faculty into age groups\n  facultyoverview_df <- \n    facultyoverview_df %>%\n    mutate(Age.Group = cut(Current.Age, breaks = seq(20, 80, by = 10)))\n  \n  # Factorize some of the classes\n  facultyoverview_df$Degree <- as.factor(facultyoverview_df$Degree)\n  facultyoverview_df$Current.Age <- as.factor(facultyoverview_df$Current.Age)\n  facultyoverview_df$Academic.Year <- as.factor(facultyoverview_df$Academic.Year)\n  \n  # Get rid of missing values\n  facultyoverview_df <- na.omit(facultyoverview_df)\n  str(facultyoverview_df)\n```\n\nFirst let us take a look at the statistical summary of the faculty from the current year to get a general understanding as to how the data looks like.\n\n```{r}\n  # Mean\n  round(mean(as.numeric(faculty1516_df$Current.Age), na.rm = TRUE))\n  \n  # Range\n  range(as.numeric(faculty1516_df$Current.Age), na.rm = TRUE)\n  \n  # Number of college faculty\n  nrow(faculty1516_df)\n  \n  # Youngest faculty member(s)\n  faculty1516_df[which(faculty1516_df$Current.Age == 28), c(1,5)]\n  \n  # Oldest faculty member(s)\n  faculty1516_df[which(faculty1516_df$Current.Age == 80), c(1,5)]\n```\n\nFinally, here are some demonstrations that represent the data in different ways:\n\n```{r fig.width = 11}\n  library(ggplot2)\n  library(reshape2)\n  qplot(Current.Age,\n        data = facultyoverview_df,\n        facets = Academic.Year~.,\n        fill = Academic.Year,\n        xlab = \"Ages\",\n        ylab = \"Count\")\n\n  ggplot(facultyoverview_df) +\n      aes(x = Age.Group, fill = Academic.Year) +\n      geom_bar(position = \"dodge\") + xlab(\"Age Groups\") + ylab(\"Count\")\n  \n  ggplot(facultyoverview_df) +\n      aes(x = Age.Group, fill = Degree) + facet_grid(. ~ Academic.Year) +\n      geom_bar(position = \"fill\") + xlab(\"Degrees\") + ylab(\"Count\")\n```\n",
    "created" : 1454429689507.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2911430003",
    "id" : "F24C2BC9",
    "lastKnownWriteTime" : 1454502870,
    "path" : "C:/Users/Zafer/Desktop/R Project/packages/ager/vignettes/vignette.Rmd",
    "project_path" : "vignettes/vignette.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_markdown"
}